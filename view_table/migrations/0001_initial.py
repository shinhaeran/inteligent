# Generated by Django 2.1.5 on 2019-06-27 07:54

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RItemRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('clicknum', models.IntegerField(blank=True, db_column='clickNum', null=True)),
                ('islike', models.TextField(blank=True, db_column='isLike', null=True)),
                ('point', models.IntegerField(blank=True, null=True)),
                ('processdate', models.TextField(blank=True, db_column='processDate', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
                ('stayduration', models.IntegerField(blank=True, db_column='stayDuration', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
            ],
            options={
                'db_table': 'R_ITEM_RATING',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RItemRatingTendency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('ppr', models.FloatField(blank=True, null=True)),
                ('cid', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'R_ITEM_RATING_TENDENCY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RPprAvg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('cid', models.IntegerField(blank=True, null=True)),
                ('ppravg', models.FloatField(blank=True, db_column='pprAvg', null=True)),
            ],
            options={
                'db_table': 'R_PPR_AVG',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RRecInter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
                ('cid', models.IntegerField(blank=True, null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('predictpref', models.FloatField(blank=True, db_column='predictPref', null=True)),
            ],
            options={
                'db_table': 'R_REC_INTER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RTendency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
                ('cid', models.IntegerField(blank=True, null=True)),
                ('wr', models.FloatField(blank=True, null=True)),
                ('wc', models.FloatField(blank=True, null=True)),
                ('ws', models.FloatField(blank=True, null=True)),
                ('wl', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'R_TENDENCY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RTimeWeight',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
                ('preference', models.FloatField(blank=True, null=True)),
                ('cid', models.IntegerField(blank=True, null=True)),
                ('weight', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'R_TIME_WEIGHT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RUserSimilarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('destidx', models.TextField(blank=True, db_column='destIdx', null=True)),
                ('sim', models.IntegerField(blank=True, null=True)),
                ('sourceidx', models.TextField(blank=True, db_column='sourceIdx', null=True)),
            ],
            options={
                'db_table': 'R_USER_SIMILARITY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TCrawlNaver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('topic', models.TextField(blank=True, null=True)),
                ('writer_name', models.TextField(blank=True, null=True)),
                ('data_source', models.TextField(blank=True, null=True)),
                ('link', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('create_at', models.TextField(blank=True, db_column='create_At', null=True)),
                ('bloggerlink', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'T_CRAWL_NAVER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TDictionary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('dict', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'T_dictionary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TItemIpa',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('create_at', models.TextField(blank=True, db_column='create_At', null=True)),
                ('mtfidf', models.TextField(blank=True, db_column='mTFIDF', null=True)),
                ('ipain', models.FloatField(blank=True, db_column='IPAin', null=True)),
                ('ipa', models.FloatField(blank=True, db_column='IPA', null=True)),
            ],
            options={
                'db_table': 'T_ITEM_IPA',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TItemService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('month', models.IntegerField(blank=True, null=True)),
                ('numstaycount', models.IntegerField(blank=True, db_column='numStayCount', null=True)),
                ('likecount', models.IntegerField(blank=True, db_column='likeCount', null=True)),
                ('avg_point_field', models.FloatField(blank=True, db_column='avg(point)', null=True)),
                ('create_at', models.TextField(blank=True, db_column='create_At', null=True)),
            ],
            options={
                'db_table': 'T_ITEM_SERVICE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TItemSns',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('word', models.TextField(blank=True, null=True)),
                ('prev_idf', models.FloatField(blank=True, null=True)),
                ('cur_idf', models.IntegerField(blank=True, null=True)),
                ('mtfidf', models.IntegerField(blank=True, db_column='mTFIDF', null=True)),
                ('windowsize', models.TextField(blank=True, db_column='windowSize', null=True)),
                ('starttime', models.TextField(blank=True, db_column='startTime', null=True)),
            ],
            options={
                'db_table': 'T_ITEM_SNS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TStopword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('stopword', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'T_stopword',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TTokenInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('word', models.TextField(blank=True, null=True)),
                ('freq', models.IntegerField(blank=True, null=True)),
                ('create_at', models.TextField(blank=True, db_column='create_At', null=True)),
            ],
            options={
                'db_table': 'T_TOKEN_INFO',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxMybtem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
            ],
            options={
                'db_table': 'ux_mybtem',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('brandname', models.TextField(blank=True, db_column='brandName', null=True)),
                ('colortype', models.TextField(blank=True, db_column='colorType', null=True)),
                ('companyname', models.TextField(blank=True, db_column='companyName', null=True)),
                ('hit', models.IntegerField(blank=True, null=True)),
                ('image', models.TextField(blank=True, null=True)),
                ('menutype', models.IntegerField(blank=True, db_column='menuType', null=True)),
                ('productname', models.TextField(blank=True, db_column='productName', null=True)),
                ('producttype', models.IntegerField(blank=True, db_column='productType', null=True)),
                ('skintype', models.TextField(blank=True, db_column='skinType', null=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('statskintype', models.TextField(blank=True, db_column='statSkinType', null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('job', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ux_product',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('modifydate', models.TextField(blank=True, db_column='modifyDate', null=True)),
                ('point', models.IntegerField(blank=True, null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
                ('semantic', models.IntegerField(blank=True, null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
            ],
            options={
                'db_table': 'ux_review',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxSearchLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('searchkeyword', models.TextField(blank=True, db_column='searchKeyword', null=True)),
                ('searchdate', models.TextField(blank=True, db_column='searchDate', null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
            ],
            options={
                'db_table': 'ux_search_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxSearchLogDestination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('searchidx', models.TextField(blank=True, db_column='searchIdx', null=True)),
                ('clicktime', models.TextField(blank=True, db_column='clickTime', null=True)),
                ('backtime', models.TextField(blank=True, db_column='backTime', null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
            ],
            options={
                'db_table': 'ux_search_log_destination',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('addressdetail', models.TextField(blank=True, db_column='addressDetail', null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('birthday', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('job', models.TextField(blank=True, null=True)),
                ('lastlogindate', models.TextField(blank=True, db_column='lastLoginDate', null=True)),
                ('nickname', models.TextField(blank=True, db_column='nickName', null=True)),
                ('password', models.IntegerField(blank=True, null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
                ('skintype', models.TextField(blank=True, db_column='skinType', null=True)),
                ('x', models.IntegerField(blank=True, null=True)),
                ('y', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ux_user',
                'managed': False,
            },
        ),
    ]
