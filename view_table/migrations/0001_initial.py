# Generated by Django 2.2.5 on 2019-11-10 09:38

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('pid', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'data_item',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('pid', models.TextField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'data_rating',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.TextField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.TextField(blank=True, null=True)),
                ('job', models.TextField(blank=True, null=True)),
                ('skintype', models.TextField(blank=True, db_column='skinType', null=True)),
            ],
            options={
                'db_table': 'data_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxProduct',
            fields=[
                ('id', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('brandname', models.TextField(blank=True, db_column='brandName', null=True)),
                ('colortype', models.TextField(blank=True, db_column='colorType', null=True)),
                ('companyname', models.TextField(blank=True, db_column='companyName', null=True)),
                ('hit', models.IntegerField(blank=True, null=True)),
                ('image', models.TextField(blank=True, null=True)),
                ('menutype', models.IntegerField(blank=True, db_column='menuType', null=True)),
                ('productname', models.TextField(blank=True, db_column='productName', null=True)),
                ('producttype', models.IntegerField(blank=True, db_column='productType', null=True)),
                ('skintype', models.TextField(blank=True, db_column='skinType', null=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('statskintype', models.TextField(blank=True, db_column='statSkinType', null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('job', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ux_product',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_id', models.TextField(blank=True, db_column='_id', null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('modifydate', models.TextField(blank=True, db_column='modifyDate', null=True)),
                ('point', models.IntegerField(blank=True, null=True)),
                ('productidx', models.TextField(blank=True, db_column='productIdx', null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
                ('semantic', models.IntegerField(blank=True, null=True)),
                ('useridx', models.TextField(blank=True, db_column='userIdx', null=True)),
            ],
            options={
                'db_table': 'ux_review',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UxUser',
            fields=[
                ('id', models.TextField(blank=True, primary_key=True, serialize=False)),
                ('address', models.TextField(blank=True, null=True)),
                ('addressdetail', models.TextField(blank=True, db_column='addressDetail', null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('birthday', models.TextField(blank=True, null=True)),
                ('email', models.TextField(blank=True, null=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('job', models.TextField(blank=True, null=True)),
                ('lastlogindate', models.TextField(blank=True, db_column='lastLoginDate', null=True)),
                ('nickname', models.TextField(blank=True, db_column='nickName', null=True)),
                ('password', models.IntegerField(blank=True, null=True)),
                ('regdate', models.TextField(blank=True, db_column='regDate', null=True)),
                ('skintype', models.TextField(blank=True, db_column='skinType', null=True)),
                ('x', models.IntegerField(blank=True, null=True)),
                ('y', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ux_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customuser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(blank=True, null=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('job', models.TextField(blank=True, null=True)),
                ('nickname', models.TextField(blank=True, db_column='nickName', null=True)),
                ('skintype', models.TextField(blank=True, db_column='skinType', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
